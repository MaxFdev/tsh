SIGCONT to continue after a SIGTSTP

SIGINT/SIGTSTP only for foreground process

jid start with '%' while pid is just #

& at the end for background command

helpful: sigemptyset(), sigaddset(), sigprocmask(), 
sigsuspend(), waitpid(), open(), dup2(), setpgid(), kill()

Do not use sleep() to solve synchronization issues

The waitpid, kill, fork, execve, setpgid, and sigprocmask 
functions will come in very handy. The WUNTRACED and WNOHANG 
options to waitpid will also be useful.

When you implement your signal handlers, be sure to send SIGINT 
and SIGTSTP signals to the entire foreground process group, 
using “-pid” instead of “pid” in the argument to the kill 
function.

One of the tricky parts of the assignment is deciding on the 
allocation of work between the waitfg and sigchldhandler 
functions. I recommend the following approach:
– In waitfg, use a busy loop around the sleep function.
– In sigchldhandler, use exactly one call to waitpid.
While other solutions are possible, such as calling waitpid 
in both waitfg and sigchldhandler, these can be very confusing. 
It is simpler to do all reaping in the handler.

In eval, the parent must use sigprocmask to block SIGCHLD 
signals before it forks the child, and then unblock these 
signals, again using sigprocmask after it adds the child to the 
job list by calling addjob. Since children inherit the blocked 
vectors of their parents, the child must be sure to then 
unblock SIGCHLD signals before it execs the new program. The 
parent needs to block the SIGCHLD signals in this way in order 
to avoid the race condition where the child is reaped by 
sigchldhandler (and thus removed from the job list) before the 
parent calls addjob.

for testing terminal foreground /bin/ls, /bin/ps, and /bin/echo 

Here is the workaround: After the fork, but before the execve, 
the child process should call setpgid(0, 0), which puts the 
child in a new process group whose group ID is identical to the 
child’s PID. This ensures that there will be only one process, 
your shell, in the foreground process group. When you type 
ctrl-c, the shell should catch the resulting SIGINT and then 
forward it to the appropriate foreground job (or more precisely, 
the process group that contains the foreground job).

Hazards include:
1. Race conditions - these are hard to debug so start early (and 
think carefully)
2. Reaping zombies - race conditions and handling signals correctly
3. Waiting for foreground job - think carefully about what the 
right way to do this is

-----
Summary:
Use SIGCONT to continue after a SIGTSTP. SIGINT/SIGTSTP are only 
 for foreground processes.

Job IDs start with '%', while process IDs are just numbers.

Use '&' at the end for background commands.

Useful functions: sigemptyset(), sigaddset(), sigprocmask(), 
 sigsuspend(), waitpid(), open(), dup2(), setpgid(), kill().

Avoid using sleep() for synchronization issues.

Key functions: waitpid, kill, fork, execve, setpgid, and 
 sigprocmask. WUNTRACED and WNOHANG options for waitpid are useful.

Send SIGINT and SIGTSTP signals to the entire foreground process 
 group using “-pid” in the argument to the kill function.

Recommended approach: use a busy loop around the sleep function in 
 waitfg, and one call to waitpid in sigchldhandler.

In eval, block SIGCHLD signals before forking the child and unblock 
 after adding the child to the job list. The child must unblock 
 SIGCHLD signals before it execs the new program.

For testing terminal foreground use /bin/ls, /bin/ps, and /bin/echo.

After the fork, but before the execve, the child process should call 
 setpgid(0, 0). This ensures only the shell is in the foreground 
 process group.

Hazards include race conditions, reaping zombies, and waiting for 
 the foreground job. Start early and think carefully to avoid these 
 issues.

